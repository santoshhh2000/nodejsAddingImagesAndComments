// APP.JS
const express = require('express');
const mysql = require('mysql2');
const app = express();
const path = require('path');

// Create connection pool to MySQL
const pool = mysql.createPool({
    host: 'localhost',
    user: 'root',
    password: 'Root@123',
    database: 'user'
});

// Set up EJS as view engine
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

// Middleware to parse POST body
app.use(express.urlencoded({ extended: true }));

// Render form
app.get('/', (req, res) => {
    res.render('form');
});

// Render posts
// Render posts
app.get('/posts', (req, res) => {
    // Fetch data from MySQL database
    pool.query('SELECT * FROM posts', (error, postsResults) => {
        if (error) {
            console.error('Error fetching posts:', error);
            res.send('Error fetching posts.');
        } else {
            // Fetch comments associated with each post
            const posts = postsResults.map(post => {
                return new Promise((resolve, reject) => {
                    pool.query('SELECT * FROM comments WHERE post_id = ?', [post.id], (error, commentsResults) => {
                        if (error) {
                            reject(error);
                        } else {
                            post.comments = commentsResults;
                            resolve(post);
                        }
                    });
                });
            });

            // Resolve all promises
            Promise.all(posts)
                .then(posts => {
                    // Render posts.ejs with fetched data
                    res.render('posts', { posts: posts });
                })
                .catch(error => {
                    console.error('Error fetching comments:', error);
                    res.send('Error fetching comments.');
                });
        }
    });
});


// Handle form submission
app.post('/submit', (req, res) => {
    const { url, description } = req.body;

    // Insert data into MySQL database
    pool.query('INSERT INTO posts (url, description) VALUES (?, ?)', [url, description], (error, results) => {
        if (error) {
            console.error('Error inserting post:', error);
            res.send('Error submitting post.');
        } else {
            console.log('Post submitted successfully.');
            // Redirect to the page displaying the data
            res.redirect('/posts');
        }
    });
});

// Render update form
app.get('/update/:id', (req, res) => {
    const postId = req.params.id;
    
    // Fetch post data from MySQL database
    pool.query('SELECT * FROM posts WHERE id = ?', [postId], (error, results) => {
        if (error) {
            console.error('Error fetching post:', error);
            res.send('Error fetching post.');
        } else {
            if (results.length === 0) {
                // Post not found
                res.status(404).send('Post not found.');
            } else {
                // Render update form with post data
                res.render('updateForm', { post: results[0] });
            }
        }
    });
});

// Handle update form submission
app.post('/update/:id', (req, res) => {
    const postId = req.params.id;
    const { url, description } = req.body;

    // Update data in MySQL database
    pool.query('UPDATE posts SET url = ?, description = ? WHERE id = ?', [url, description, postId], (error, results) => {
        if (error) {
            console.error('Error updating post:', error);
            res.send('Error updating post.');
        } else {
            console.log('Post updated successfully.');
            // Redirect back to posts page
            res.redirect('/posts');
        }
    });
});

// Delete post
// Delete post
// Delete post
// Delete post
app.post('/delete/:id', (req, res) => {
    const postId = req.params.id;

    // First, delete associated comments
    pool.query('DELETE FROM comments WHERE post_id = ?', [postId], (error, commentResults) => {
        if (error) {
            console.error('Error deleting comments:', error);
            res.status(500).send('Error deleting comments: ' + error.message);
        } else {
            // After deleting comments, delete the post
            pool.query('DELETE FROM posts WHERE id = ?', [postId], (error, postResults) => {
                if (error) {
                    console.error('Error deleting post:', error);
                    res.status(500).send('Error deleting post: ' + error.message);
                } else {
                    console.log('Post deleted successfully.');
                    // Redirect back to posts page
                    res.redirect('/posts');
                }
            });
        }
    });
});



// Handle comment submission
app.post('/comments/:postId', (req, res) => {
    const postId = req.params.postId;
    const { commentText } = req.body;

    // Insert comment into database
    pool.query('INSERT INTO comments (post_id, comment_text) VALUES (?, ?)', [postId, commentText], (error, results) => {
        if (error) {
            console.error('Error inserting comment:', error);
            res.send('Error submitting comment.');
        } else {
            console.log('Comment submitted successfully.');
            // Redirect back to posts page or use AJAX to dynamically update comments
            res.redirect('/posts');
        }
    });
});

app.listen(48, () => {
    console.log('Server is running on port 3000');
});


//UPDATEFORM.EJS
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Update Post</title>
</head>
<body>
    <h1>Update Post</h1>
    <form action="/update/<%= post.id %>" method="post">
        <label for="url">URL:</label>
        <input type="text" id="url" name="url" value="<%= post.url %>">
        <br>
        <label for="description">Description:</label>
        <textarea id="description" name="description"><%= post.description %></textarea>
        <br>
        <button type="submit">Update</button>
    </form>
</body>
</html>


//POSTS.EJS<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Posts</title>
    <style>
        /* Flexbox styles */
        img {
            max-width: 15%; /* Make images responsive and scale down if they exceed the container width */
            height: auto; /* Maintain aspect ratio */
        }
    </style>
</head>
<body>
    <h1>Posts</h1>
    <ul>
        <% posts.forEach(post => { %>
            <li>
                <strong>Description:</strong> <%= post.description %><br>
                <!-- Display image -->
                <img src="<%= post.url %>" alt="<%= post.description %>">
                <!-- Update button -->
                <form action="/update/<%= post.id %>" method="GET">
                    <button type="submit">Update</button>
                </form>
                <!-- Delete button -->
                <form action="/delete/<%= post.id %>" method="POST">
                    <button type="submit">Delete</button>
                </form>
                <!-- Form for adding comments -->
                <form action="/comments/<%= post.id %>" method="POST">
                    <input type="text" name="commentText" placeholder="Add a comment">
                    <button type="submit">Add Comment</button>
                </form>
                <!-- Display comments -->
                <ul>
                    <% post.comments.forEach(comment => { %>
                        <li><%= comment.comment_text %></li>
                    <% }); %>
                </ul>
            </li>
        <% }); %>
    </ul>
    <a href="/">Back to Post form Page</a>
</body>
</html>


//FORM.EJS
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Post Form</title>
</head>
<body>
    <h1>Post Form</h1>
    <form action="/submit" method="POST">
        <label for="url">URL:</label><br>
        <input type="text" id="url" name="url" required><br>
        <label for="description">Description:</label><br>
        <textarea id="description" name="description" required></textarea><br>
        <button type="submit">Submit</button>
    </form>
</body>
</html>



